        algo skills needed *-* 
            phrase-based
                phase0-shuxi
                    basic math problems
                    small logic problems
                    paint in command linea 
                    (what you have done as bechlor)
                phase1-水题
                    https://blog.csdn.net/qq429205464/article/details/6732899
                    https://blog.csdn.net/qq_17246605/article/details/52136415
                phase2-数据结构 
                    other seeds::
                        http://www.pythontip.com/acm/problemCategory
                        https://en.cppreference.com/w/cpp/header
                        https://en.cppreference.com/w/
                        分类：线性，树木，graph结构
                        串处理、栈和队列、树、哈希、二分查找、并查集、线段树、二维线段树、哈夫曼树、后缀数组等等。
                        数据结构内容比较杂，涉及的又都是基础的知识，其中的很多思想都可以用在其他题目上，一定要学好。
                        这里把它作为一个方向，是为了它到了后期的一些高级的数据结构，例如字典树、划分树、线段树、AC自动机等等。
                        推荐题目：
                            查找（二分、哈希）：poj3349、poj1002、hdu2141、hdu1025
                            串（AC自动机、KMP）：hdu3695、hdu2203、sdut2411、poj2406、hdu1358、hdu3336
                            并查集：poj2236、poj2524、poj1182、poj1611、hdu1232
                            字典树：poj2503、poj2001、hdu1247、hdu1075、hdu1251
                            树状数组：hdu1556、poj1195、poj3321、hdu1541/poj2352
                            线段树：poj2155、poj1195、poj3468、poj3264、hdu1556、hdu1698、hdu1754、hdu1166
                            划分树：poj2104、sdut2610
                    structured seed::
                        lan:
                            https://en.cppreference.com/w/cpp/header
                        线性
                            in practice:: 
                                stack, queue, hash
                                    双端队列
                                单链表 循环链表...
                                排序 查找
                                并查集 最大团 最大独立集 

                        tree 
                            基本树的各种遍历
                            排序
                                优先队列
                            查找
                                儿叉查找树
                                平衡查找树
                                散列表
                                单词查找树
                            压缩：：丰富测试数据
                            棋盘算法
                            特殊树
                                堆 红黑 AVL 斐波那契堆 van Emde 树 kd-树（搜索树） BSP树 线段树  博弈树  
                                A*  双向广度优先搜索  ida* algorithm  树状数组  左偏树  多串匹配树  
                                字典树  无根树  Kruskal 最小生成树  trie树(静态建树、动态建树)   BST  
                                B-树、B+树、B*树
                                位置树
                        graph 
                            寻找路径
                                寻找连通分量
                                最小生成树
                                拓扑排序
                                最短路径
                                    单源最短路径dijkstra
                                    多源最短路径
                            运筹学
                                最大流算法
                                最小费用流
                                最大匹配算法
                            计算几何
                                空间剖分（space partitioning）
                                    三角剖分算法
                                    Delaunay三角剖分
                                图的对偶变换
                                凸包与半空间求交
                                叉乘、判线段相交、然后写个凸包. 
                                线段交点、多角形面积公式.
                            特殊图
                                Voronoi图
                                四叉树：非均匀网格生成
                                八叉树
                                光线跟踪求交点问题
                                铸造（casting） 问题（其实是线性规划问题）
                                欧拉路
                                最小度限制生成树（变种）
                                差分约束系统的建立和求解.
                                图的割边和割点
                                Beam Search（集束搜索）
                                    一种启发式图搜索算法，通常用在图的解空间比较大的情况下，
                                        为了减少搜索所占用的空间和时间

                phase*-build platform
                    +
                        50% code finish, still, has to be improved later 

                    datasets(flat) real world 
                        data 
                            https://www.kaggle.com/AnalyzeBoston/crimes-in-boston
                                date and location info 
                            https://www.kaggle.com/gsi-japan/global-map-japan-data/downloads/global-map-japan-data.zip/1
                                img info
                            https://www.kaggle.com/doit-intl/autotel-shared-car-locations
                                location information 
                            https://www.kaggle.com/open-flights/flight-route-database
                                route information 
                            https://www.kaggle.com/fivethirtyeight/uber-pickups-in-new-york-city
                                time and adress data info 
                            https://www.kaggle.com/berkeleyearth/climate-change-earth-surface-temperature-data
                                temperature and place 
                            https://www.kaggle.com/google/google-landmarks-dataset#train.csv
                            https://www.kaggle.com/c/landmark-retrieval-challenge
                                not c++ / deep lerning project 
                            https://www.kaggle.com/START-UMD/gtd
                                location , summary xxx
                            
                        persers 
                            csv reader  
                                https://github.com/ben-strasser/fast-cpp-csv-parser
                                    head only 
                                https://github.com/vincentlaucsb/csv-parser
                                https://github.com/d99kris/rapidcsv
                            json reader 
                                https://github.com/dropbox/json11
                                https://github.com/open-source-parsers/jsoncpp
                                https://github.com/taocpp/json
                                https://github.com/nbsdx/SimpleJSON
                    code 
                        with c++ opengl under macos, ubuntu, winxxx
                            ok
                            but not summerized !
                phase3-books资源
                    刘汝佳系列：
                        《算法竞赛入门经典》刘汝佳（小白）
                            这本书不厚，题目很灵活，拿来入门很好。
                        《算法竞赛入门经典（第2版）》刘汝佳（紫皮书）
                            小白的第二版，没看这本书，不知道多了什么内容，只是变厚了好多……
                        《算法竞赛入门经典——训练指南》刘汝佳（大白）
                            大白看了一部分，语言通俗易懂，计算几何就是靠它入门的。
                        《算法艺术与信息学竞赛》刘汝佳（黑皮书）
                            很难，大三之前不推荐看。
                            刘汝佳的书习题很多在UVA上，国内访问很慢，好像还被墙了，可以FQ过去刷题……
                    《离散数学》
                    《组合数学》
                    《数据结构》
                    《挑战程序设计竞赛》
                    据说这本书不错，拿来推荐一下。
                    《算法导论》
                    这本书放在这是用来膜拜的……
                phase4-深入小领域
                    1、数论
                    2、图论
                    3、动态规划
                    4、计算几何
                    5、搜索
                    6、博弈
                    7、组合数学
                    8、数据结构
                    9、模拟
                phase5-比赛资源 
                    1、定期比赛网站
                        Bestcoder：我们常打的比赛，题目质量待考究，不过用来每周练练手还是不错的。
                        Codeforces：题目质量较高，你的得分rating也是未来找工作的一个可信度很高的衡量标准。
                        Topcoder：没打过，听说很难。
                    2、不定期比赛
                        你可以关注杭电或者其他一些oj的Recent Contests，可以查看其他oj最近举行的一些比赛
                phase6-multi-core algorithms:
                    helloworld: usage in java 
                        prime counting problem 
                        "multithread java"
                            synchronized block 
                            Lock interface (java concurrency package) 
                    foreach datastructure and algos!!:
                        *queue,stack,hashtable,skiplist,barrier?,
                            lock-free?
                            lock-based?
                            wait-free?
                            xxx
                    codes ref
                        https://github.com/mathew-kurian/EE379K
                        see below 
                        ...
                    competation
                        see below 
                        ...
                        
            resource-based
                multi-core algorithms:
                    for inhairtly concurrent problems 
                        >in security/math/
                            searching for patterns in SHA-1 hashes : https://github.com/skeeto/lstack
                            prime finding code on ppt-intro
                            parallel version of Dijkstra's algorithm.
                                https://github.com/jerr0328/Lock-Free-Pairing-Heap
                        >in cg/ai/data science
                            concurrent downloading 
                            
                        >in physics/
                            my task this year: himeno benchmark with pthread!
                            
                    foreach datastructure and algos!! there may be a parallel version!!:
                        *queue,stack,hashtable,skiplist,barrier?,
                            lock-free?
                            lock-based?
                            wait-free?
                            xxx
                         *dijkstra,xxx,xxx
                    codes from net as ref:
                        search for:
                            pthread/lock-free xxx/wait-free xxx/
                            ...
                        search and find simple/basic ones : 
                            simple ones:
                                xxx
                            https://github.com/mathew-kurian/EE379K
                                school work, very good resource 
                            https://github.com/rigtorp/awesome-lockfree
                            https://github.com/cameron314/concurrentqueue
                                large project
                            https://github.com/skeeto/lstack
                                https://nullprogram.com/blog/2014/09/02/
                                good application, small project, easy to learn 
                                based on pthread 
                            https://github.com/ben-manes/lock-free-queue
                                need some skill to run 
                            https://github.com/edwardw/high-scale-java-lib
                            https://github.com/mthssdrbrg/LockFreeStack
                                small task
                            https://github.com/byronlai/lock-free-data-structures
                                small task 
                                easy to learn 
                            https://github.com/koleslena/LockFreeFibo/blob/master/Main.java
                                simple application 
                            
                            
                    competations 
                        http://lspd.mackenzie.br/marathon/current/index.html
                        
                basic 
                    LINKS
                        C:\Users\yzy\_expE\test_env
                        基础算法，acm算法测试环境目的--
                            1.各种生活问题的算法实现+复杂度优化 **
                            2.大问题转化成小问题进行测试 **
                        Term来源：
                            Notiz笔记中acm部分
                            我的网上一些名词
                            书籍（算法导论...）
                        &的含义：需要反复训练，实现的基本问题
                            已经实现的
                        提示：
                            清楚概念以后 **再在这里实现代码pcode是伪代码
                            这里很多名词只是一个引子，具体最好有个理论的基础理解，理论也在这里边了？
                            这里是理论+伪代码
                        比赛事例
                            http://poj.org/showcontest?contest_id=1144
                        ++ : 程序的组合应用
                        在整体过程中的理解：
                            这里很多问题比较古老，不需要太多数据支撑（那是因为有人简化了）
                            ->不同领域中，根据数据特点，有不同算法，这里的算法可以在很多领域中通用：：
                                这里的训练是对以后组合的基础
                            ->基础中的基础，计算机科学的掌上明珠。通用算法
                        加快理解
                            https://www.cs.usfca.edu/~galles/visualization/Algorithms.html
                            https://visualgo.net/en
                        playground
                            https://leetcode.com/playground/new/empty
                            但是有两个不好：
                                1.没网的时候没法用，到哪里还得先联网
                                2.输入习惯，护眼问题，只有在vscode中可以解决
                        
                            taking notes with a structured notebook(folder dir)
                            -高性价比的学习模式
                 
                        
                    
                            
                    
                            

                            
                       
                    
                    


