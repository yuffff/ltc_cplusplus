
    basic 
        项目是怎么回事？
            用熟悉的语言实现一些新的算法，新的东西
        算法是别人或者自己的，那怎么叫熟悉的语言？
            所有小task都可以毫不费力没有参考或者只参考笔记完成
            -这需要训练
                1.理解并设计tiny tasks 
                2.反复实现
        熟悉c++语言
            基本的概念了如指掌
            所有task信手拈来
    book--c++ in 21 days
        basic
        oo in c++
        c++ IO
        STL lib.
            是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数
                可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈
            C++ 语言的核心优势之一就是便于软件的重用
            标准模板库 (Standard Template Library)就是一些常用
                数据结构和算法的模板的集合。主要由 Alex Stepanov开发，
                于1998年被添加进C++标准
            相对的，每个人都该实现一下自己的算法库
                首先，可以提供新的研究成果，近似算法xxx
                其次，方便理解，别人写的你总归是不理解的！
            有了STL，不必再从头写大多的标准数据结构和算法，并且可获得非常高的性能。
            核心：容器，迭代器，算法
            容器：可容纳各种数据类型的数据结构。
                1) 顺序容器
                    vector：后部插入/删除，直接访问
                    deque：前/后部插入/删除，直接访问
                    list：双向链表，任意位置插入/删除
                2)关联容器
                    set：快速查找，无重复元素
                    multiset ：快速查找，可有重复元素
                    map：一对一映射，无重复元素，基于关键字查找
                    multimap ：一对一映射，可有重复元素，基于关键字查找前2者合称为第一类容器
                3)容器适配器
                    stack： LIFO
                    queue： FIFO
                    priority_queue：优先级高的元素先出容器概述
            
                头文件
                    1) vector 头文件 <vector>
                        实际上就是个动态数组。随机存取任何元素都能在常数时间完成。
                            在尾端增删元素具有较佳的性能。
                    2) deque 头文件 <deque>
                        也是个动态数组，随机存取任何元素都能在常数时间完成(但性能次于vector)。
                            在两端增删元素具有较佳的性能。
                    3) list 头文件 <list>
                        双向链表，在任何位置增删元素都能在常数时间完成。    
                            不支持随机存取，查询的时候要从头开始。
        advanced 
    book--xxx
    book--xxx
    ...
    summerize-theory review 
        +
            参考
                http://www.runoob.com/cplusplus/cpp-comments.html
            概述	
                编译语言与解释语言
                最经典的编译语言是c，最经典的解释语言是Ruby
                解释语言效率未必就低于编译语言，可以通过加强解释器来实现解释语言执行的优化
                相比matlab，具有开源优势
                相比java与c这种强类型语言，具有更好
                强类型语言与弱类型语言
                    弱类型的语言的东西没有明显的类型,他能随着环境的不同,自动变换类型，比如vbs、javascript语言。变量声明比较简单，仅仅是var就可以解决。
                    强类型比如java、c
                强类型语言实现数学操作比较费劲
                编译器
                    mingw是gcc 的windows的移植版  
                    mingw支持win32API 单一编译器可以支持多个API 
                    主函数加载  变量声明 以及函数调用是受API说明 以及编译器支持的   
                    mingw  gcc编译器支持win32API    
                    c51   单片机编译器支持  c51API
                    gcc的各种版本：mingw
        //
            快速复习，’说破而不戳破‘
            把概念高度概括，起码自己再看的时候知道怎么回事，直接就可以写代码
            题目--笔记--code
                不到万不得已不要看code，争取自己可以做出来 
                笔记相当于一种有效快速的提示（网上的东西杂乱）
                
        =======================语言基础=====================
            基本环境：引入iostream，其中定义了一些标准对象，使用std命名空间 打印hello &
            数据类型表达式
                七种基本的 C++ 数据类型(小写)
                    int 
                    float double
                    char
                    bool
                用大括号括起来是语句块
                C++ 是区分大小写的编程语言，Manpower 和 manpower 是两个不同的标识符。
                保留字不能作为常量名、变量名或其他标识符名称
                三字符组就是用于表示另一个字符的三个字符序列，用来表示特殊字符
                注释快捷键（VS2013）
                    注释Ctrl+K+C
                    取消Ctrl+K+U
                块注释符（/*...*/）是不可以嵌套使用的。
                使用 typedef 为一个已有的类型取一个新的名字 &
                    typedef int feet;feet distance;
                枚举类型(enumeration)是C++中的一种派生数据类型
                    enum color { red, green, blue } c;
                    枚举名color，red标识符，c枚举常量
                    默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2
                    也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，green 的值为 5。
                    enum color { red, green=5, blue };
                    在这里，blue 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 red 的值依然为 0。
                float 23位小数。double，52位小数
                ***不带初始化的定义：
                    带有静态存储持续时间的变量会被隐式初始化为 NULL（所有字节的值都是 0），其他所有变量的初始值是未定义的。
                指向内存位置的表达式被称为左值表达式（lvalue）。
                右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。
                变量是左值，因此可以出现在赋值号的左边
                ***义全局变量时，系统会自动初始化！，为0值：
                定义一个无符号长整数 &
                定义一个浮点数常量，计算长度 &
                    314159E-5L 
                空格可以分割字符串 &
                使用 #define 预处理器定义常量 &（最好是大写字母）
                有符号整数和无符号整数使用范围是不同的，输入一个正数，有符号整数可能解释为负数 50000 int &
                自己的类定义
                    class 开头，后跟类的名称。类的主体是包含在一对花括号中。类定义后必须跟着一个分号或一个声明列表
                    定义一个Box类，写get set方法，使用标准的定义过程，加上构造函数 &
                    构造函数
                        构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void ！
                        初始化列表来初始化字段
                        类成员函数或者构造函数定义的时候可以无歧义的直接使用成员变量名
                        应该是public 的
                        在main中使用时（两种都可以） &
                            不用new关键字：自动在栈中为每个变量开辟内存空间
                            使用new：在堆中创建，默认调用构造方法（动态内存）
                    成员属性
                        默认情况下，类的所有成员都是私有的
                        保护成员在派生类（即子类）中是可访问的
                        有public, protected, private三种继承方式，它们相应地改变了基类成员的访问属性。
                    公共数据成员可以使用直接成员访问运算符 (.) 来访问
                    类定义内部仅仅进行成员函数声明，方便管理，声明就是一个函数头，没有函数体
                    类方法最好使用范围解析运算符 :: 来定义，在类定义外部
                    有元 *
                        有元函数可以不通过类名直接调用，但是没有this指针
                    内联函数 
                        比较大小的内联函数 &
                        如果已定义的函数多于10行，编译器会忽略 inline 限定符。
                        加快调用速度
                        实质是空间换时间
                            程序在编译器编译的时候，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体进行替换，
                            而对于其他的函数，都是在运行时候才被替代。这其实就是个空间代价换时间的i节省。
                    this指针
                        每一个对象都能通过 this 指针来访问自己的地址 *
                        因为友元不是类的成员。只有成员函数才有 this 指针。
                    指向类的指针
                        一个指向 C++ 类的指针与指向结构的指针类似
                        动态计算Box1 2的体积 &
                    类的静态成员
                        这意味着无论创建多少个类的对象，静态成员都只有一个副本。
                        实现一个类实例的计数器 &（每次构造的时候加1）
                数组 
                    个数是固定的，为了效率
                    数组名可以直接用于指针运算
                    生成 10 个随机数，并使用数组来返回它们 &
                    数组地址传给函数，生成数组序列 &
                    字符串
                        C++ 编译器会在初始化数组时，自动把 '\0' 放在字符串的末尾
                        各种字符串操作: &
                            strcpy
                            strcat
                            strlen
                            strcmp
                            strchr
                        String类型|：
                            C++ 标准库提供了 string 类类型，支持上述所有的操作，另外还增加了其他更多的功能。
                指针类型
                    动态内存分配，没有指针是无法执行的
                    连字号（&）运算符访问的地址，取地址操作
                    *是取值操作
                    注意区分指针的声明和使用
                    指针的实际数据类型是 是一个代表内存地址的长的十六进制数
                    指针可以用来指向一个真实的变量地址，用来取变量的数值，传值等操作
                    数组指针：指向数组开头的常量，不能作为左值
                        本身不可以变，但是取值之后的数值是可以变得
                    构造一个数组，把 var[2] 赋值为 500 &
                引用类型
                    引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字
                    引用必须在创建时被初始化。指针可以在任何时间被初始化。
                    把引用当成是变量附属在内存位置中的第二个标签
                    引用就是取别名，直接操作就可以
                    主要应用
                        函数参数
                            交换两个int类型的数据 &
                        把引用作为返回值
                            不能返回局部变量的引用
                            可以出现在赋值语句左边，
                            写一个数组，改变数组中i位的数值 &
                结构类型
                    结构是 C++ 中另一种用户自定义的可用的数据类型，同c语言中
            时间运算
                C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数
                引入ctime，而后可以调用time函数 输出秒数&
                输出格式化的日期时间 &
                    strftime()函数

            数学运算
                引用数学头文件 <cmath>
                sin cos等静态函数操作 &
            函数
                在函数声明时，最好提供一个函数名在main之前，而函数的实际定义则可以在任何地方进行
                返回两个数字中较大的数 &
                通过引用调用处理一个数组 &
                Lambda 函数与表达式
                    增加可读性？一般不用
                实现汉诺塔 &
            控制语句
                循环分支for while if
                输出上下三角 &
                九九乘法表 &
            输入输出
                cout<<"string"<<endl，endl是换行符
                cin<<变量名；
                流提取运算符 >> 在一个语句中可以多次使用，如果要求输入多个数据，可以使用如下语句：

                scanf("%d",&x);传地址
                printf("%d",x);传数值
            刷ACM题目 &&
            命名空间
                定义命名空间 &
                using 指令
                嵌套的命名空间
        =======================深入API（实现各种算法应用）===================
            文件操作（最具有c++特色的用法）
                先写入文件，再读入 & ASCII 二进制模式的话要加上binary属性
                IOS是流式I/O的基类
                ios::in ios::out定义打开文件的属性
                写入文件
                    通用法 fstream
                    专用法 ofstream---in file stream 输入文件流
                            初始化的时候默认调用open函数
                            在这里您使用的是 ofstream 或 fstream 对象，而不是 cout 对象。
                读取文件
                    通用法 fstream
                    专用 ifstream
                        在这里您使用的是 ifstream 或 fstream 对象，而不是 cin 对象。
                        读取一行数据 &，使用ifstream中的getline函数，返回的数据在参数中（参数就是把一个buff）
                通用法打开文件要加上属性，看起来整齐
                推荐使用专用法
                而后就可以用cin cout来操作了
                文件对象别忘了关闭
            多线程
                使用pthread开源库 &
                    1.库文件直接放在项目中，引入include等目录
                    2.放置dll文件在cpp文件夹中
                    3.引用lib文件#pragma comment(lib, "pthreadVC2.lib")
            c++ STL库
                模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈
                容器（Containers），算法（Algorithms），迭代器（iterators）
                定义：向量容器<类型> 名称；
                调用：名称.算法；
                迭代器相当于指针，进行遍历的工具；
                动态创建数组，并输出所有元素，显示大小 &
                push_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。
                begin( ) 函数返回一个指向向量开头的迭代器。
                size( ) 函数显示向量的大小。
                C++ 标准库包含了所有的 C 标准库，为了支持类型安全，做了一定的添加和修改
                标准的 C++ 面向对象类库定义了大量支持一些常见操作的类，比如输入/输出 I/O、字符串处理、数值处理
            GUI操作
                QT
                    概述
                        不用跨平台：因为商业需要只能硬着头皮维护下去，浪费了公司大量的人力财力
                        国内公司只是市场驱动的，它们不是真正技术驱动的公司，
                            很多软件都是用开源改后包装成自己的，依靠垄断存活的
                        QT你不能说他不流行吧, WPS, Wirshark, KDE, dropbox, skype, virtualbox都和qt有关吧, 你想写个跨平台的C++程序, QT是个不错的选择,
                        如果是创业型小公司想开发适配自己公司产品的配套软件并想支持多平台那么Qt是不二的选择。
                            想在4个平台开发软件假设工作量是4，那么用qt可以达到2.5左右。总体工作量减少
                        在桌面Linux和嵌入式领域是主流地位
                        环境搭建https://www.cnblogs.com/happykoukou/p/7457013.html &
                    显示
                    组件
                    附加组件
                    应用
                        本地 &
                            界面类：计算器，登陆界面，图书馆系统
                            文档媒体：图片处理，文件名处理工具
                            游戏：俄罗斯方块，扫雷
                        网络 &
                            http下载器
                            ftp查看器
                            网络发包ping
            延时
                引入windows头文件，而后可以利用其中的Sleep函数进行延时，单位是毫秒 &
            网络
                虽然 CGI 文件是 C++ 可执行文件，但是按照惯例它的扩展名是 .cgi
                Apache Web 服务器会配置在 /var/www/cgi-bin 中运行 CGI 程序
                请使用 chmod 755 cplusplus.cgi UNIX 命令来修改文件模式，确保文件可执行。访问可执行文件
                GET 和 POST 方法 &
                获取 Cookies
                文件上传实例
            数据库
        =======================超越API（实现自己的代码库）===================
            注意项目封装
            数值计算的库操作数组
                eigen库
                    就是一个头文件与一些实现！！
                    重写了一些操作符号，规范
                    矩阵操作，特别是二维矩阵
                    矩阵的乘除加减求逆求行列式
                    Eigen速度最快，与自己定义数组的操作效率相当
                    矩阵存储等有优化
                    All classes and functions defined in this header file 
                        (and other Eigen header files) are in the Eigen namespace！
                    helloworld程序，添加一个矩阵 &
                    随机生成矩阵+矩阵乘法运算 &
            OpenGL库
            OpenCV库
        =======================根据工作要求=======================
            GDB和LLDB
                他们两个都是调试用的Debugger，只是LLDB是比较高级的版本，或者在调试开发iOS应用时比较好用，不然人家苹果为什么换成了LLDB了呢！
            GCC/Clang（LLVM库）
                它是一套以 GPL 及 LGPL 许可证所发行的自由软件，也是 GNU计划的关键部分
                GCC 原名为 GNU C 语言编译器，因为它原本只能处理 C语言。GCC 很快地扩展，变得可处理 C++
                LLVM 是 Low Level Virtual Machine 的简称，这个库提供了与编译器相关的支持，能够进行程序语言的编译期优化、链接优化、在线编译优化、代码生成
                Clang发布于 LLVM BSD 许可证下的 C/C++/Objective C/Objective C++ 编译器，其目标（之一）就是超越 GCC。
                但Apple对编译工具会提出更高的要求。
                GCC 基于 C，不需要 C++ 编译器即可编译
                苹果有关
    summerize-small tasks designed:
        //basic training unit, play with it  
        Basic
            sum/multiple/xxx(basic math) two numbers 
                input: 12 24
                output: 36
                check: with calcu. (online is ok)
            loop over to print numbers/shapes
                10times 2d loop
                yanhui triangle 
                triangle with * 
                ...
        Structure
            basic bin. tree
            advanced trees:
            graph 
            ...
        File IO
            read/write file 
            ...
        Network
            ...